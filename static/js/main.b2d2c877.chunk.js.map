{"version":3,"sources":["Input.js","Card.js","CardList.js","service/dataservice.js","Error.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","inputText","onInputChange","onSubmit","clearInput","onClick","react_default","a","createElement","action","className","type","placeholder","onChange","value","Card","_props$card","card","title","author","publisher","link","image","src","alt","href","CardList","cards","map","i","Card_Card","key","DataService","data","Object","classCallCheck","this","length","slice","authors","imageLinks","thumbnail","previewLink","Eror","error","App","_this","possibleConstructorReturn","getPrototypeOf","call","event","setState","input","target","e","preventDefault","loading","errorType","state","fetch","concat","then","res","ok","json","Error","books","totalItems","items","forEach","book","push","volumeInfo","catch","Input_Input","react_loader_spinner_default","color","height","width","CardList_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2d2c877.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./css/Input.css\";\r\n\r\nexport default function Input(props) {\r\n  const { inputText, onInputChange, onSubmit, clearInput, onClick } = props;\r\n  return (\r\n    <div>\r\n      <h1>Book | Finder</h1>\r\n      <form action=\"\" onSubmit={onSubmit}>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Search by book or author...\"\r\n          onChange={onInputChange}\r\n          value={inputText}\r\n        />\r\n        <span onClick={clearInput}>X</span>\r\n        <button onClick={onClick} className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./css/Card.css\";\r\n\r\nexport default function Card(props) {\r\n  const { title, author, publisher, link, image } = props.card;\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={image} alt=\"\" />\r\n      <div className=\"card-right\">\r\n        <h1>{title}</h1>\r\n        <p>By: {author}</p>\r\n        <p>Puublished By: {publisher}</p>\r\n        <a href={link}>\r\n          <button className=\"button\">See this Book</button>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./css/CardList.css\";\r\n\r\nexport default function CardList(props) {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.cards.map((card, i) => {\r\n        return <Card card={card} key={i} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","class DataService {\r\n  constructor(data) {\r\n    this.title =\r\n      data.title.length > 110 ? data.title.slice(0, 110) : data.title;\r\n    this.author = data.authors ? data.authors : \"Unknown author\";\r\n    this.publisher = data.publisher ? data.publisher : \"Unknown publisher\";\r\n    this.image = data.imageLinks\r\n      ? data.imageLinks.thumbnail\r\n      : \"https://image.freepik.com/free-vector/books-stack-realistic_1284-4735.jpg\";\r\n    this.link = data.previewLink;\r\n  }\r\n}\r\nexport default DataService;\r\n","import React from \"react\";\r\nimport \"./css/Error.css\";\r\n\r\nexport default function Eror(props) {\r\n  switch (props.error) {\r\n    case \"empty input\":\r\n      return <div className=\"error\">You must enter something in input</div>;\r\n      break;\r\n    case \"empty response\":\r\n      return <div className=\"error\">There is no such book</div>;\r\n      break;\r\n    case \"something went wrong\":\r\n      return <div className=\"error\">Something went wrong</div>;\r\n      break;\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n\nimport Input from \"./Input\";\nimport CardList from \"./CardList\";\nimport DataService from \"./service/dataservice\";\nimport Loader from \"react-loader-spinner\";\nimport Error from \"./Error\";\n\nimport \"./css/App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      cards: [],\n      loading: false,\n      error: false,\n      errorType: \"\"\n    };\n  }\n\n  onInputChange = event => {\n    this.setState({\n      input: event.target.value\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    const key = \"AIzaSyAOaVBnu7fgtzZVvuSjWw9MaGmDE3P73sA\";\n    const url = \"https://www.googleapis.com/books/v1/volumes?q=\";\n    // setting loader\n    this.setState({\n      loading: true,\n      error: false,\n      errorType: \"\"\n    });\n    // mistake - empty input\n    if (this.state.input.length === 0) {\n      this.setState({ error: true, errorType: \"empty input\" });\n    } else {\n      // fetching\n      fetch(\n        `${url + this.state.input}&key=${key}&maxResults=40&orderBy=relevance`\n      )\n        .then(res => {\n          // handling fetch errors\n          if (res.ok) {\n            return res.json();\n          } else {\n            throw new Error(\"Something went wrong\");\n          }\n        })\n        .then(data => {\n          const books = [];\n          // mistake - empty response\n          if (data.totalItems === 0) {\n            this.setState({ error: true, errorType: \"empty response\" });\n          } else {\n            this.setState({ error: false, errorType: \"\" });\n            data.items.forEach((book, i) => {\n              books.push(new DataService(book.volumeInfo));\n            });\n          }\n          // removing loader and setting book cards\n          this.setState({\n            cards: books,\n            loading: false\n          });\n        })\n        .catch(error => {\n          this.setState({\n            error: true,\n            errorType: \"something went wrong\"\n          });\n        });\n    }\n  };\n  // making sure that mistake is removed\n  onClick = () => {\n    this.setState({ error: false, errorType: \"\" });\n  };\n  clearInput = () => {\n    this.setState({ input: \"\" });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Input\n          clearInput={this.clearInput}\n          inputText={this.state.input}\n          onInputChange={this.onInputChange}\n          onSubmit={this.onSubmit}\n          onClick={this.onClick}\n        />\n        {// handling mistakes\n        this.state.error ? (\n          <Error error={this.state.errorType} />\n        ) : // checking if page is loading or ready\n        this.state.loading ? (\n          <Loader\n            type=\"Circles\"\n            color=\"green\"\n            height={200}\n            width={200}\n            className=\"loader\"\n          />\n        ) : this.state.cards.length > 0 ? ( // landing page issue\n          <CardList cards={this.state.cards} loading={this.state.loading} />\n        ) : (\n          <p>Nothing yet</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}